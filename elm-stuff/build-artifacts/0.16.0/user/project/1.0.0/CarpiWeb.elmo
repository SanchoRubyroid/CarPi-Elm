Elm.CarpiWeb = Elm.CarpiWeb || {};
Elm.CarpiWeb.make = function (_elm) {
   "use strict";
   _elm.CarpiWeb = _elm.CarpiWeb || {};
   if (_elm.CarpiWeb.values) return _elm.CarpiWeb.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var getAxis = function () {    var delta = $Time.fps(30);return A2($Signal.sampleOn,delta,$Keyboard.arrows);}();
   var drawCanvas = F2(function (w,h) {    return A2($Graphics$Collage.filled,$Color.gray,A2($Graphics$Collage.rect,w,h));});
   var view = F2(function (_p0,car) {
      var _p1 = _p0;
      var _p4 = _p1._0;
      var _p3 = _p1._1;
      var _p2 = {ctor: "_Tuple2",_0: $Basics.toFloat(_p4),_1: $Basics.toFloat(_p3)};
      var w$ = _p2._0;
      var h$ = _p2._1;
      return A3($Graphics$Collage.collage,_p4,_p3,_U.list([A2(drawCanvas,w$,h$),$Graphics$Collage.toForm($Graphics$Element.show(car))]));
   });
   var update = F2(function (axis,car) {
      var directionalPower = _U.cmp(axis.y,0) > 0 || _U.eq(axis.y,0) && _U.cmp(car.powerLevel,0) < 0 ? car.power : -1 * car.power;
      var appliedBrakePower = _U.eq(axis.y,-1) && _U.cmp(car.powerLevel,0) > 0 || _U.eq(axis.y,1) && _U.cmp(car.powerLevel,
      0) < 0 ? car.brakePower * directionalPower : directionalPower;
      var appliedPowerLevel = _U.eq(axis.y,0) && _U.eq(car.powerLevel,0) ? car.powerLevel : car.powerLevel + appliedBrakePower;
      var stabelizedZeroPowerLevel = _U.cmp($Basics.abs(car.powerLevel + appliedPowerLevel),car.power) < 0 ? 0 : appliedPowerLevel;
      var getPowerLevel = A3($Basics.clamp,-100,100,stabelizedZeroPowerLevel);
      return _U.update(car,{turnDirection: axis.x,powerLevel: getPowerLevel});
   });
   var initialCar = {power: 3,brakePower: 3,powerLevel: 0,turnDirection: 0};
   var model = A3($Signal.foldp,update,initialCar,getAxis);
   var main = A3($Signal.map2,view,$Window.dimensions,model);
   var Model = F4(function (a,b,c,d) {    return {power: a,brakePower: b,powerLevel: c,turnDirection: d};});
   return _elm.CarpiWeb.values = {_op: _op
                                 ,Model: Model
                                 ,initialCar: initialCar
                                 ,update: update
                                 ,view: view
                                 ,drawCanvas: drawCanvas
                                 ,getAxis: getAxis
                                 ,model: model
                                 ,main: main};
};